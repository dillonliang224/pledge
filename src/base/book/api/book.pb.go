// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: src/base/book/api/book.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/mwitkow/go-proto-validators"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FindByIdReq struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindByIdReq) Reset()         { *m = FindByIdReq{} }
func (m *FindByIdReq) String() string { return proto.CompactTextString(m) }
func (*FindByIdReq) ProtoMessage()    {}
func (*FindByIdReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b3e3b4e71f1ddea, []int{0}
}
func (m *FindByIdReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindByIdReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindByIdReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindByIdReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindByIdReq.Merge(m, src)
}
func (m *FindByIdReq) XXX_Size() int {
	return m.Size()
}
func (m *FindByIdReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FindByIdReq.DiscardUnknown(m)
}

var xxx_messageInfo_FindByIdReq proto.InternalMessageInfo

func (m *FindByIdReq) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type BookResp struct {
	Book                 *Book    `protobuf:"bytes,1,opt,name=book,proto3" json:"book,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BookResp) Reset()         { *m = BookResp{} }
func (m *BookResp) String() string { return proto.CompactTextString(m) }
func (*BookResp) ProtoMessage()    {}
func (*BookResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b3e3b4e71f1ddea, []int{1}
}
func (m *BookResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BookResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BookResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BookResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BookResp.Merge(m, src)
}
func (m *BookResp) XXX_Size() int {
	return m.Size()
}
func (m *BookResp) XXX_DiscardUnknown() {
	xxx_messageInfo_BookResp.DiscardUnknown(m)
}

var xxx_messageInfo_BookResp proto.InternalMessageInfo

func (m *BookResp) GetBook() *Book {
	if m != nil {
		return m.Book
	}
	return nil
}

type Book struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title                string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Author               string   `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Cover                string   `protobuf:"bytes,4,opt,name=cover,proto3" json:"cover,omitempty"`
	ShortIntro           string   `protobuf:"bytes,5,opt,name=shortIntro,proto3" json:"shortIntro,omitempty"`
	LongIntro            string   `protobuf:"bytes,6,opt,name=longIntro,proto3" json:"longIntro,omitempty"`
	LastChapter          string   `protobuf:"bytes,7,opt,name=lastChapter,proto3" json:"lastChapter,omitempty"`
	ChaptersCount        int64    `protobuf:"varint,8,opt,name=chaptersCount,proto3" json:"chaptersCount,omitempty"`
	IsSerial             bool     `protobuf:"varint,9,opt,name=isSerial,proto3" json:"isSerial,omitempty"`
	Updated              int64    `protobuf:"varint,10,opt,name=updated,proto3" json:"updated,omitempty"`
	TocCount             int64    `protobuf:"varint,11,opt,name=tocCount,proto3" json:"tocCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Book) Reset()         { *m = Book{} }
func (m *Book) String() string { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()    {}
func (*Book) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b3e3b4e71f1ddea, []int{2}
}
func (m *Book) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Book) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Book.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Book) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Book.Merge(m, src)
}
func (m *Book) XXX_Size() int {
	return m.Size()
}
func (m *Book) XXX_DiscardUnknown() {
	xxx_messageInfo_Book.DiscardUnknown(m)
}

var xxx_messageInfo_Book proto.InternalMessageInfo

func (m *Book) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Book) GetShortIntro() string {
	if m != nil {
		return m.ShortIntro
	}
	return ""
}

func (m *Book) GetLongIntro() string {
	if m != nil {
		return m.LongIntro
	}
	return ""
}

func (m *Book) GetLastChapter() string {
	if m != nil {
		return m.LastChapter
	}
	return ""
}

func (m *Book) GetChaptersCount() int64 {
	if m != nil {
		return m.ChaptersCount
	}
	return 0
}

func (m *Book) GetIsSerial() bool {
	if m != nil {
		return m.IsSerial
	}
	return false
}

func (m *Book) GetUpdated() int64 {
	if m != nil {
		return m.Updated
	}
	return 0
}

func (m *Book) GetTocCount() int64 {
	if m != nil {
		return m.TocCount
	}
	return 0
}

func init() {
	proto.RegisterType((*FindByIdReq)(nil), "bookpb.FindByIdReq")
	proto.RegisterType((*BookResp)(nil), "bookpb.BookResp")
	proto.RegisterType((*Book)(nil), "bookpb.Book")
}

func init() { proto.RegisterFile("src/base/book/api/book.proto", fileDescriptor_9b3e3b4e71f1ddea) }

var fileDescriptor_9b3e3b4e71f1ddea = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x52, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x26, 0xfd, 0x5b, 0x7a, 0xca, 0xf8, 0xf1, 0x00, 0x59, 0xd5, 0x94, 0x59, 0xdd, 0x24, 0x2a,
	0x44, 0x1b, 0x28, 0x08, 0x04, 0x97, 0x1d, 0x9a, 0xd4, 0xdb, 0x70, 0x07, 0x02, 0xc9, 0x49, 0xbc,
	0xd6, 0x6a, 0x9a, 0x13, 0x6c, 0x67, 0x13, 0x42, 0xbc, 0x07, 0x6f, 0x04, 0x97, 0xbc, 0xc1, 0x50,
	0x78, 0x11, 0x64, 0x67, 0x2b, 0xe9, 0xdd, 0xf7, 0x77, 0x8e, 0x8f, 0xce, 0x31, 0x1c, 0x6a, 0x95,
	0x84, 0x31, 0xd7, 0x22, 0x8c, 0x11, 0xd7, 0x21, 0x2f, 0xa4, 0x03, 0xd3, 0x42, 0xa1, 0x41, 0xd2,
	0xb3, 0xb8, 0x88, 0x87, 0xaf, 0x96, 0xd2, 0xac, 0xca, 0x78, 0x9a, 0xe0, 0x26, 0xdc, 0x5c, 0x4a,
	0xb3, 0xc6, 0xcb, 0x70, 0x89, 0x13, 0x17, 0x9a, 0x5c, 0xf0, 0x4c, 0xa6, 0xdc, 0xa0, 0xd2, 0xe1,
	0x16, 0xd6, 0xf5, 0xa3, 0x33, 0x18, 0x9c, 0xc9, 0x3c, 0x9d, 0x7f, 0x5d, 0xa4, 0x91, 0xf8, 0x42,
	0x5e, 0x43, 0x4b, 0xa6, 0xd4, 0x63, 0xde, 0xb8, 0x3f, 0x7f, 0x5c, 0x5d, 0x1d, 0x1d, 0xc3, 0x9d,
	0xcf, 0x1f, 0x9f, 0x4d, 0xde, 0xf0, 0xc9, 0xf9, 0xa7, 0x6f, 0xb3, 0x97, 0xdf, 0x4f, 0x9e, 0xdc,
	0x5f, 0xbc, 0x63, 0x9b, 0x52, 0x1b, 0xc6, 0x59, 0xac, 0x31, 0x67, 0x32, 0x8d, 0x5a, 0x32, 0x1d,
	0x3d, 0x05, 0x7f, 0x8e, 0xb8, 0x8e, 0x84, 0x2e, 0x08, 0x83, 0x8e, 0x9d, 0xca, 0xb5, 0x19, 0xcc,
	0x6e, 0x4f, 0xeb, 0x11, 0xa7, 0xce, 0x77, 0xce, 0xe8, 0x67, 0x0b, 0x3a, 0x96, 0x92, 0xe3, 0xc6,
	0x7b, 0x07, 0xd5, 0xd5, 0xd1, 0x5d, 0xd8, 0xdf, 0x79, 0xcf, 0xf6, 0x26, 0x0f, 0xa0, 0x6b, 0xa4,
	0xc9, 0x04, 0x6d, 0xd9, 0x5c, 0x54, 0x13, 0xf2, 0x08, 0x7a, 0xbc, 0x34, 0x2b, 0x54, 0xb4, 0xed,
	0xe4, 0x6b, 0x66, 0xd3, 0x09, 0x5e, 0x08, 0x45, 0x3b, 0x75, 0xda, 0x11, 0x12, 0x00, 0xe8, 0x15,
	0x2a, 0xb3, 0xc8, 0x8d, 0x42, 0xda, 0x75, 0x56, 0x43, 0x21, 0x87, 0xd0, 0xcf, 0x30, 0x5f, 0xd6,
	0x76, 0xcf, 0xd9, 0xff, 0x05, 0xc2, 0x60, 0x90, 0x71, 0x6d, 0x4e, 0x57, 0xbc, 0x30, 0x42, 0xd1,
	0x3d, 0xe7, 0x37, 0x25, 0x72, 0x02, 0xfb, 0x49, 0x0d, 0xf5, 0x29, 0x96, 0xb9, 0xa1, 0x3e, 0xf3,
	0xc6, 0xed, 0x68, 0x57, 0x24, 0x43, 0xf0, 0xa5, 0x7e, 0x2f, 0x94, 0xe4, 0x19, 0xed, 0x33, 0x6f,
	0xec, 0x47, 0x5b, 0x4e, 0x28, 0xec, 0x95, 0x45, 0xca, 0x8d, 0x48, 0x29, 0xb8, 0xda, 0x1b, 0x6a,
	0xab, 0x0c, 0x26, 0x75, 0xdb, 0x81, 0xb3, 0xb6, 0x7c, 0xf6, 0x16, 0xba, 0x76, 0xa3, 0x9a, 0x3c,
	0x07, 0xff, 0xfc, 0xfa, 0x90, 0xe4, 0xe0, 0x66, 0xe5, 0x8d, 0xd3, 0x0e, 0xef, 0xed, 0xdc, 0x41,
	0xe8, 0x62, 0xfe, 0xf0, 0x57, 0x15, 0x78, 0xbf, 0xab, 0xc0, 0xfb, 0x53, 0x05, 0xde, 0x8f, 0xbf,
	0xc1, 0xad, 0x0f, 0x6d, 0x5e, 0xc8, 0xb8, 0xe7, 0x7e, 0xc6, 0x8b, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x25, 0x49, 0x62, 0x72, 0x79, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BooksClient is the client API for Books service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BooksClient interface {
	FindById(ctx context.Context, in *FindByIdReq, opts ...grpc.CallOption) (*BookResp, error)
}

type booksClient struct {
	cc *grpc.ClientConn
}

func NewBooksClient(cc *grpc.ClientConn) BooksClient {
	return &booksClient{cc}
}

func (c *booksClient) FindById(ctx context.Context, in *FindByIdReq, opts ...grpc.CallOption) (*BookResp, error) {
	out := new(BookResp)
	err := c.cc.Invoke(ctx, "/bookpb.books/findById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BooksServer is the server API for Books service.
type BooksServer interface {
	FindById(context.Context, *FindByIdReq) (*BookResp, error)
}

func RegisterBooksServer(s *grpc.Server, srv BooksServer) {
	s.RegisterService(&_Books_serviceDesc, srv)
}

func _Books_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BooksServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bookpb.books/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BooksServer).FindById(ctx, req.(*FindByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Books_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bookpb.books",
	HandlerType: (*BooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "findById",
			Handler:    _Books_FindById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/base/book/api/book.proto",
}

func (m *FindByIdReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindByIdReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BookResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BookResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Book != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Book.Size()))
		n1, err := m.Book.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Book) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Book) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Author) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Author)))
		i += copy(dAtA[i:], m.Author)
	}
	if len(m.Cover) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.Cover)))
		i += copy(dAtA[i:], m.Cover)
	}
	if len(m.ShortIntro) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.ShortIntro)))
		i += copy(dAtA[i:], m.ShortIntro)
	}
	if len(m.LongIntro) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.LongIntro)))
		i += copy(dAtA[i:], m.LongIntro)
	}
	if len(m.LastChapter) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintBook(dAtA, i, uint64(len(m.LastChapter)))
		i += copy(dAtA[i:], m.LastChapter)
	}
	if m.ChaptersCount != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.ChaptersCount))
	}
	if m.IsSerial {
		dAtA[i] = 0x48
		i++
		if m.IsSerial {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Updated != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.Updated))
	}
	if m.TocCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintBook(dAtA, i, uint64(m.TocCount))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBook(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *FindByIdReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BookResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Book != nil {
		l = m.Book.Size()
		n += 1 + l + sovBook(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Book) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.ShortIntro)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.LongIntro)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	l = len(m.LastChapter)
	if l > 0 {
		n += 1 + l + sovBook(uint64(l))
	}
	if m.ChaptersCount != 0 {
		n += 1 + sovBook(uint64(m.ChaptersCount))
	}
	if m.IsSerial {
		n += 2
	}
	if m.Updated != 0 {
		n += 1 + sovBook(uint64(m.Updated))
	}
	if m.TocCount != 0 {
		n += 1 + sovBook(uint64(m.TocCount))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBook(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBook(x uint64) (n int) {
	return sovBook(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FindByIdReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindByIdReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindByIdReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BookResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BookResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BookResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Book", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Book == nil {
				m.Book = &Book{}
			}
			if err := m.Book.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Book) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBook
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Book: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Book: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShortIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShortIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LongIntro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LongIntro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastChapter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBook
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBook
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastChapter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChaptersCount", wireType)
			}
			m.ChaptersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChaptersCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSerial", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSerial = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			m.Updated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Updated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TocCount", wireType)
			}
			m.TocCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBook
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TocCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBook(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBook
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBook(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBook
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBook
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBook
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBook
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBook
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBook(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBook
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBook = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBook   = fmt.Errorf("proto: integer overflow")
)
